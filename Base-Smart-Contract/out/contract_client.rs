// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rs::{
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
    String,
};
pub struct ContractFactory<R> {
    #[allow(dead_code)]
    remoting: R,
}
impl<R> ContractFactory<R> {
    #[allow(unused)]
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::ContractFactory for ContractFactory<R> {
    type Args = R::Args;
    fn new(&self) -> impl Activation<Args = R::Args> {
        RemotingAction::<_, contract_factory::io::New>::new(self.remoting.clone(), ())
    }
}

pub mod contract_factory {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct New(());
        impl New {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <New as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for New {
            const ROUTE: &'static [u8] = &[12, 78, 101, 119];
            type Params = ();
            type Reply = ();
        }
    }
}
pub struct TrafficLight<R> {
    remoting: R,
}
impl<R> TrafficLight<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::TrafficLight for TrafficLight<R> {
    type Args = R::Args;
    fn green(&mut self) -> impl Call<Output = ContractResponse, Args = R::Args> {
        RemotingAction::<_, traffic_light::io::Green>::new(self.remoting.clone(), ())
    }
    fn random_func_command(
        &mut self,
        user_address: ActorId,
        string_t: String,
        number: u32,
        data: StructTest,
        strings_vec: Vec<String>,
    ) -> impl Call<Output = (ActorId, String, u32, StructTest, Vec<String>), Args = R::Args> {
        RemotingAction::<_, traffic_light::io::RandomFuncCommand>::new(
            self.remoting.clone(),
            (user_address, string_t, number, data, strings_vec),
        )
    }
    fn red(&mut self) -> impl Call<Output = ContractResponse, Args = R::Args> {
        RemotingAction::<_, traffic_light::io::Red>::new(self.remoting.clone(), ())
    }
    fn yellow(&mut self) -> impl Call<Output = ContractResponse, Args = R::Args> {
        RemotingAction::<_, traffic_light::io::Yellow>::new(self.remoting.clone(), ())
    }
    fn contract_owner(&self) -> impl Query<Output = ActorId, Args = R::Args> {
        RemotingAction::<_, traffic_light::io::ContractOwner>::new(self.remoting.clone(), ())
    }
    fn random_func_query(
        &self,
        string_t: String,
        number: u32,
        data: StructTest,
        strings_vec: Vec<String>,
    ) -> impl Query<Output = (String, u32, StructTest, Vec<String>), Args = R::Args> {
        RemotingAction::<_, traffic_light::io::RandomFuncQuery>::new(
            self.remoting.clone(),
            (string_t, number, data, strings_vec),
        )
    }
    fn traffic_light(&self) -> impl Query<Output = IoContractState, Args = R::Args> {
        RemotingAction::<_, traffic_light::io::TrafficLight>::new(self.remoting.clone(), ())
    }
}

pub mod traffic_light {
    use super::*;

    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct Green(());
        impl Green {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <Green as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for Green {
            const ROUTE: &'static [u8] = &[
                48, 84, 114, 97, 102, 102, 105, 99, 76, 105, 103, 104, 116, 20, 71, 114, 101, 101,
                110,
            ];
            type Params = ();
            type Reply = super::ContractResponse;
        }
        pub struct RandomFuncCommand(());
        impl RandomFuncCommand {
            #[allow(dead_code)]
            pub fn encode_call(
                user_address: ActorId,
                string_t: String,
                number: u32,
                data: super::StructTest,
                strings_vec: Vec<String>,
            ) -> Vec<u8> {
                <RandomFuncCommand as ActionIo>::encode_call(&(
                    user_address,
                    string_t,
                    number,
                    data,
                    strings_vec,
                ))
            }
        }
        impl ActionIo for RandomFuncCommand {
            const ROUTE: &'static [u8] = &[
                48, 84, 114, 97, 102, 102, 105, 99, 76, 105, 103, 104, 116, 68, 82, 97, 110, 100,
                111, 109, 70, 117, 110, 99, 67, 111, 109, 109, 97, 110, 100,
            ];
            type Params = (ActorId, String, u32, super::StructTest, Vec<String>);
            type Reply = (ActorId, String, u32, super::StructTest, Vec<String>);
        }
        pub struct Red(());
        impl Red {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <Red as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for Red {
            const ROUTE: &'static [u8] = &[
                48, 84, 114, 97, 102, 102, 105, 99, 76, 105, 103, 104, 116, 12, 82, 101, 100,
            ];
            type Params = ();
            type Reply = super::ContractResponse;
        }
        pub struct Yellow(());
        impl Yellow {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <Yellow as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for Yellow {
            const ROUTE: &'static [u8] = &[
                48, 84, 114, 97, 102, 102, 105, 99, 76, 105, 103, 104, 116, 24, 89, 101, 108, 108,
                111, 119,
            ];
            type Params = ();
            type Reply = super::ContractResponse;
        }
        pub struct ContractOwner(());
        impl ContractOwner {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <ContractOwner as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for ContractOwner {
            const ROUTE: &'static [u8] = &[
                48, 84, 114, 97, 102, 102, 105, 99, 76, 105, 103, 104, 116, 52, 67, 111, 110, 116,
                114, 97, 99, 116, 79, 119, 110, 101, 114,
            ];
            type Params = ();
            type Reply = ActorId;
        }
        pub struct RandomFuncQuery(());
        impl RandomFuncQuery {
            #[allow(dead_code)]
            pub fn encode_call(
                string_t: String,
                number: u32,
                data: super::StructTest,
                strings_vec: Vec<String>,
            ) -> Vec<u8> {
                <RandomFuncQuery as ActionIo>::encode_call(&(string_t, number, data, strings_vec))
            }
        }
        impl ActionIo for RandomFuncQuery {
            const ROUTE: &'static [u8] = &[
                48, 84, 114, 97, 102, 102, 105, 99, 76, 105, 103, 104, 116, 60, 82, 97, 110, 100,
                111, 109, 70, 117, 110, 99, 81, 117, 101, 114, 121,
            ];
            type Params = (String, u32, super::StructTest, Vec<String>);
            type Reply = (String, u32, super::StructTest, Vec<String>);
        }
        pub struct TrafficLight(());
        impl TrafficLight {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <TrafficLight as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for TrafficLight {
            const ROUTE: &'static [u8] = &[
                48, 84, 114, 97, 102, 102, 105, 99, 76, 105, 103, 104, 116, 48, 84, 114, 97, 102,
                102, 105, 99, 76, 105, 103, 104, 116,
            ];
            type Params = ();
            type Reply = super::IoContractState;
        }
    }
}
pub struct KeyringService<R> {
    remoting: R,
}
impl<R> KeyringService<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::KeyringService for KeyringService<R> {
    type Args = R::Args;
    fn bind_keyring_data_to_user_address(
        &mut self,
        user_address: ActorId,
        keyring_data: KeyringData,
    ) -> impl Call<Output = KeyringEvent, Args = R::Args> {
        RemotingAction::<_, keyring_service::io::BindKeyringDataToUserAddress>::new(
            self.remoting.clone(),
            (user_address, keyring_data),
        )
    }
    fn bind_keyring_data_to_user_coded_name(
        &mut self,
        user_coded_name: String,
        keyring_data: KeyringData,
    ) -> impl Call<Output = KeyringEvent, Args = R::Args> {
        RemotingAction::<_, keyring_service::io::BindKeyringDataToUserCodedName>::new(
            self.remoting.clone(),
            (user_coded_name, keyring_data),
        )
    }
    fn keyring_account_data(
        &self,
        keyring_address: ActorId,
    ) -> impl Query<Output = KeyringQueryEvent, Args = R::Args> {
        RemotingAction::<_, keyring_service::io::KeyringAccountData>::new(
            self.remoting.clone(),
            keyring_address,
        )
    }
    fn keyring_address_from_user_address(
        &self,
        user_address: ActorId,
    ) -> impl Query<Output = KeyringQueryEvent, Args = R::Args> {
        RemotingAction::<_, keyring_service::io::KeyringAddressFromUserAddress>::new(
            self.remoting.clone(),
            user_address,
        )
    }
    fn keyring_address_from_user_coded_name(
        &self,
        user_coded_name: String,
    ) -> impl Query<Output = KeyringQueryEvent, Args = R::Args> {
        RemotingAction::<_, keyring_service::io::KeyringAddressFromUserCodedName>::new(
            self.remoting.clone(),
            user_coded_name,
        )
    }
}

pub mod keyring_service {
    use super::*;

    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct BindKeyringDataToUserAddress(());
        impl BindKeyringDataToUserAddress {
            #[allow(dead_code)]
            pub fn encode_call(user_address: ActorId, keyring_data: super::KeyringData) -> Vec<u8> {
                <BindKeyringDataToUserAddress as ActionIo>::encode_call(&(
                    user_address,
                    keyring_data,
                ))
            }
        }
        impl ActionIo for BindKeyringDataToUserAddress {
            const ROUTE: &'static [u8] = &[
                56, 75, 101, 121, 114, 105, 110, 103, 83, 101, 114, 118, 105, 99, 101, 112, 66,
                105, 110, 100, 75, 101, 121, 114, 105, 110, 103, 68, 97, 116, 97, 84, 111, 85, 115,
                101, 114, 65, 100, 100, 114, 101, 115, 115,
            ];
            type Params = (ActorId, super::KeyringData);
            type Reply = super::KeyringEvent;
        }
        pub struct BindKeyringDataToUserCodedName(());
        impl BindKeyringDataToUserCodedName {
            #[allow(dead_code)]
            pub fn encode_call(
                user_coded_name: String,
                keyring_data: super::KeyringData,
            ) -> Vec<u8> {
                <BindKeyringDataToUserCodedName as ActionIo>::encode_call(&(
                    user_coded_name,
                    keyring_data,
                ))
            }
        }
        impl ActionIo for BindKeyringDataToUserCodedName {
            const ROUTE: &'static [u8] = &[
                56, 75, 101, 121, 114, 105, 110, 103, 83, 101, 114, 118, 105, 99, 101, 120, 66,
                105, 110, 100, 75, 101, 121, 114, 105, 110, 103, 68, 97, 116, 97, 84, 111, 85, 115,
                101, 114, 67, 111, 100, 101, 100, 78, 97, 109, 101,
            ];
            type Params = (String, super::KeyringData);
            type Reply = super::KeyringEvent;
        }
        pub struct KeyringAccountData(());
        impl KeyringAccountData {
            #[allow(dead_code)]
            pub fn encode_call(keyring_address: ActorId) -> Vec<u8> {
                <KeyringAccountData as ActionIo>::encode_call(&keyring_address)
            }
        }
        impl ActionIo for KeyringAccountData {
            const ROUTE: &'static [u8] = &[
                56, 75, 101, 121, 114, 105, 110, 103, 83, 101, 114, 118, 105, 99, 101, 72, 75, 101,
                121, 114, 105, 110, 103, 65, 99, 99, 111, 117, 110, 116, 68, 97, 116, 97,
            ];
            type Params = ActorId;
            type Reply = super::KeyringQueryEvent;
        }
        pub struct KeyringAddressFromUserAddress(());
        impl KeyringAddressFromUserAddress {
            #[allow(dead_code)]
            pub fn encode_call(user_address: ActorId) -> Vec<u8> {
                <KeyringAddressFromUserAddress as ActionIo>::encode_call(&user_address)
            }
        }
        impl ActionIo for KeyringAddressFromUserAddress {
            const ROUTE: &'static [u8] = &[
                56, 75, 101, 121, 114, 105, 110, 103, 83, 101, 114, 118, 105, 99, 101, 116, 75,
                101, 121, 114, 105, 110, 103, 65, 100, 100, 114, 101, 115, 115, 70, 114, 111, 109,
                85, 115, 101, 114, 65, 100, 100, 114, 101, 115, 115,
            ];
            type Params = ActorId;
            type Reply = super::KeyringQueryEvent;
        }
        pub struct KeyringAddressFromUserCodedName(());
        impl KeyringAddressFromUserCodedName {
            #[allow(dead_code)]
            pub fn encode_call(user_coded_name: String) -> Vec<u8> {
                <KeyringAddressFromUserCodedName as ActionIo>::encode_call(&user_coded_name)
            }
        }
        impl ActionIo for KeyringAddressFromUserCodedName {
            const ROUTE: &'static [u8] = &[
                56, 75, 101, 121, 114, 105, 110, 103, 83, 101, 114, 118, 105, 99, 101, 124, 75,
                101, 121, 114, 105, 110, 103, 65, 100, 100, 114, 101, 115, 115, 70, 114, 111, 109,
                85, 115, 101, 114, 67, 111, 100, 101, 100, 78, 97, 109, 101,
            ];
            type Params = String;
            type Reply = super::KeyringQueryEvent;
        }
    }
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum ContractResponse {
    GreenReceived,
    YellowReceived,
    RedReceived,
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct StructTest {
    pub name: String,
    pub age: u128,
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct IoContractState {
    pub owner: ActorId,
    pub current_light: Light,
    pub callers: Vec<(ActorId, Light)>,
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum Light {
    Green,
    Red,
    Yellow,
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct KeyringData {
    pub address: String,
    pub encoded: String,
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum KeyringEvent {
    KeyringAccountSet,
    Error(KeyringError),
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum KeyringError {
    KeyringAddressAlreadyEsists,
    UserAddressAlreadyExists,
    UserCodedNameAlreadyExists,
    UserDoesNotHasKeyringAccount,
    KeyringAccountAlreadyExists,
    SessionHasInvalidCredentials,
    UserAndKeyringAddressAreTheSame,
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum KeyringQueryEvent {
    KeyringAccountAddress(Option<ActorId>),
    KeyringAccountData(Option<KeyringData>),
}

pub mod traits {
    use super::*;
    #[allow(dead_code)]
    pub trait ContractFactory {
        type Args;
        #[allow(clippy::new_ret_no_self)]
        #[allow(clippy::wrong_self_convention)]
        fn new(&self) -> impl Activation<Args = Self::Args>;
    }

    #[allow(clippy::type_complexity)]
    pub trait TrafficLight {
        type Args;
        fn green(&mut self) -> impl Call<Output = ContractResponse, Args = Self::Args>;
        fn random_func_command(
            &mut self,
            user_address: ActorId,
            string_t: String,
            number: u32,
            data: StructTest,
            strings_vec: Vec<String>,
        ) -> impl Call<Output = (ActorId, String, u32, StructTest, Vec<String>), Args = Self::Args>;
        fn red(&mut self) -> impl Call<Output = ContractResponse, Args = Self::Args>;
        fn yellow(&mut self) -> impl Call<Output = ContractResponse, Args = Self::Args>;
        fn contract_owner(&self) -> impl Query<Output = ActorId, Args = Self::Args>;
        fn random_func_query(
            &self,
            string_t: String,
            number: u32,
            data: StructTest,
            strings_vec: Vec<String>,
        ) -> impl Query<Output = (String, u32, StructTest, Vec<String>), Args = Self::Args>;
        fn traffic_light(&self) -> impl Query<Output = IoContractState, Args = Self::Args>;
    }

    #[allow(clippy::type_complexity)]
    pub trait KeyringService {
        type Args;
        fn bind_keyring_data_to_user_address(
            &mut self,
            user_address: ActorId,
            keyring_data: KeyringData,
        ) -> impl Call<Output = KeyringEvent, Args = Self::Args>;
        fn bind_keyring_data_to_user_coded_name(
            &mut self,
            user_coded_name: String,
            keyring_data: KeyringData,
        ) -> impl Call<Output = KeyringEvent, Args = Self::Args>;
        fn keyring_account_data(
            &self,
            keyring_address: ActorId,
        ) -> impl Query<Output = KeyringQueryEvent, Args = Self::Args>;
        fn keyring_address_from_user_address(
            &self,
            user_address: ActorId,
        ) -> impl Query<Output = KeyringQueryEvent, Args = Self::Args>;
        fn keyring_address_from_user_coded_name(
            &self,
            user_coded_name: String,
        ) -> impl Query<Output = KeyringQueryEvent, Args = Self::Args>;
    }
}

#[cfg(feature = "mocks")]
#[cfg(not(target_arch = "wasm32"))]
extern crate std;

#[cfg(feature = "mocks")]
#[cfg(not(target_arch = "wasm32"))]
pub mod mockall {
    use super::*;
    use sails_rs::mockall::*;
    mock! { pub TrafficLight<A> {} #[allow(refining_impl_trait)] #[allow(clippy::type_complexity)] impl<A> traits::TrafficLight for TrafficLight<A> { type Args = A; fn green (&mut self, ) -> MockCall<A, ContractResponse>;fn random_func_command (&mut self, user_address: ActorId,string_t: String,number: u32,data: StructTest,strings_vec: Vec<String>,) -> MockCall<A, (ActorId,String,u32,StructTest,Vec<String>,)>;fn red (&mut self, ) -> MockCall<A, ContractResponse>;fn yellow (&mut self, ) -> MockCall<A, ContractResponse>;fn contract_owner (& self, ) -> MockQuery<A, ActorId>;fn random_func_query (& self, string_t: String,number: u32,data: StructTest,strings_vec: Vec<String>,) -> MockQuery<A, (String,u32,StructTest,Vec<String>,)>;fn traffic_light (& self, ) -> MockQuery<A, IoContractState>; } }
    mock! { pub KeyringService<A> {} #[allow(refining_impl_trait)] #[allow(clippy::type_complexity)] impl<A> traits::KeyringService for KeyringService<A> { type Args = A; fn bind_keyring_data_to_user_address (&mut self, user_address: ActorId,keyring_data: KeyringData,) -> MockCall<A, KeyringEvent>;fn bind_keyring_data_to_user_coded_name (&mut self, user_coded_name: String,keyring_data: KeyringData,) -> MockCall<A, KeyringEvent>;fn keyring_account_data (& self, keyring_address: ActorId,) -> MockQuery<A, KeyringQueryEvent>;fn keyring_address_from_user_address (& self, user_address: ActorId,) -> MockQuery<A, KeyringQueryEvent>;fn keyring_address_from_user_coded_name (& self, user_coded_name: String,) -> MockQuery<A, KeyringQueryEvent>; } }
}
